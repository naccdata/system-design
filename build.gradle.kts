/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.3.3/samples
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
  id("pl.zalas.structurizr-cli") version "1.9.0"
}

repositories {
    mavenCentral()
}

val plantuml by configurations.creating
val workspace by configurations.creating
val workspacepuml by configurations.creating

dependencies {
    "plantuml"("net.sourceforge.plantuml:plantuml:1.2023.5")
    "workspace"(files("src/structurizr/workspace.dsl"))
}

structurizrCli {
    export {
        format = "plantuml"
        workspace = "src/structurizr/workspace.dsl"
    }
}
tasks.named("structurizrCliExport") { dependsOn(configurations["workspace"])}

tasks.register<Copy>("copyWorkspacePlantUML") {
    dependsOn("structurizrCliExport")
    from("src/structurizr") {
        include("*.puml")
    }
    into(layout.buildDirectory.dir("workspace"))
}

tasks.register<JavaExec>("buildImages") {
    dependsOn("copyWorkspacePlantUML")
    val srcFiles = layout.buildDirectory.files("workspace/structurizr-*.puml")
    val outDir = layout.buildDirectory.dir("images")
    group = "plantuml"
    classpath = configurations["plantuml"]
    args(listOf(srcFiles, "-o", outDir, "-tsvg"))
}

interface InjectedExecOps {
    @get:Inject val execOps: ExecOperations
}

tasks.register("ensureMarkdownDirectory") {
    val directory = layout.buildDirectory.file("markdown")

    doLast {
        mkdir(directory)
    }
}

tasks.register("buildDocs") {
    dependsOn("ensureMarkdownDirectory")

    val injected = project.objects.newInstance<InjectedExecOps>()

    doLast {
        val baseDir = layout.buildDirectory.dir("markdown").get().asFile
        val sourceFiles = fileTree("src/markdown") {
            include("*.md")
        }
        sourceFiles.visit( Action<FileVisitDetails> {
            val srcFile = this.getFile()
            val fileName = this.getName()
            val outFile = file("${baseDir}/${fileName}.svg")
            

            injected.execOps.exec {
                commandLine("./node_modules/.bin/mmdc", "-p", "puppeteer-config.json", "-i", "${srcFile}", "-o", "${outFile}")
            }
        })
    }
}

tasks.register<Copy>("copyDecisions"){
    from(layout.projectDirectory.dir("src/markdown")) {
        include("decisions/**")
    }
    into(layout.buildDirectory.dir("markdown"))
}

tasks.register("build") {
    dependsOn("buildImages")
    dependsOn("buildDocs")
    dependsOn("copyDecisions")
}

/*
    Publish Tasks
*/
tasks.register<Copy>("publishDocs"){
    dependsOn("buildDocs")
    val baseDir = layout.buildDirectory.dir("markdown")
    from(baseDir) {
        include("**/*.md", "**/*.svg")
    }
    into("docs")
}

tasks.register<Copy>("publishImages") {
    dependsOn("buildImages")
    from(layout.buildDirectory.dir("images")) {
        include("**/*.svg")
    }
    into("docs/images")
}

tasks.register("publish") {
    dependsOn("publishDocs")
    dependsOn("publishImages")
}

/*
    Clean tasks
*/
tasks.register<Delete>("cleanStructurizr"){
    delete(files("src/structurizr/structurizr-*.puml"))
}

tasks.register<Delete>("cleanImages"){
    delete(layout.buildDirectory.dir("images"))
}

tasks.register<Delete>("cleanWorkspace"){
    delete(layout.buildDirectory.dir("workspace"))
}

tasks.register<Delete>("cleanDocs"){
    delete(layout.buildDirectory.dir("markdown"))
}

tasks.register("clean") {
    dependsOn("cleanStructurizr")
    dependsOn("cleanImages")
    dependsOn("cleanWorkspace")
    dependsOn("cleanDocs")
}